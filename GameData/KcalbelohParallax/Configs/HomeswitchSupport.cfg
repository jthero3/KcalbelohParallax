//
//  Efil
//

// Fixup terrain, PQSMods, biomes
@Kopernicus:HAS[@KcalbelohSystemSettings:HAS[#HomeSwitch[Efil]]]:LAST[Parallax_StockTerrainTextures]:NEEDS[Parallax_StockTerrainTextures]
{
	@Body[Kerbin]
	{
		// Set biome map to Efil's and copy the biomes across
		@Properties
		{
			%biomeMap = #$../../Body[Efil]/Properties/biomeMap$
			!Biomes{}
			#../../Body[Efil]/Properties/Biomes{}
		}

		%PQS
		{
			%Mods
			{
				!Parallax,*{}
				Parallax
				{
					subdivisionLevel = 7
					subdivisionRadius = 650
					order = 999999
				}
			}
		}
	}
}

// Fixup scatters
@ParallaxScatters:HAS[@KcalbelohSystemSettings:HAS[#HomeSwitch[Efil]]]:LAST[Parallax_StockScatterTextures]:NEEDS[Parallax_StockScatterTextures]
{
    @Body:HAS[#name[Efil]]
    {
        @name = Kerbin
    }
}

// Fixup terrain
@ParallaxTerrain:HAS[@KcalbelohSystemSettings:HAS[#HomeSwitch[Efil]]]:LAST[Parallax_StockTerrainTextures]:NEEDS[Parallax_StockTerrainTextures]
{
    @Body:HAS[#name[Efil]]
    {
        @name = Kerbin
    }
}

//
//  Suluco
//

// Fixup terrain, PQSMods, biomes
@Kopernicus:HAS[@KcalbelohSystemSettings:HAS[#HomeSwitch[Suluco]]]:LAST[Parallax_StockTerrainTextures]:NEEDS[Parallax_StockTerrainTextures]
{
	@Body[Kerbin]
	{
		// Set biome map to Suluco's and copy the biomes across
		@Properties
		{
			%biomeMap = #$../../Body[Suluco]/Properties/biomeMap$
			!Biomes{}
			#../../Body[Suluco]/Properties/Biomes{}
		}

		%PQS
		{
			%Mods
			{
				!Parallax,*{}
				Parallax
				{
					subdivisionLevel = 7
					subdivisionRadius = 650
					order = 999999
				}
			}
		}
	}
}

// Fixup scatters
@ParallaxScatters:HAS[@KcalbelohSystemSettings:HAS[#HomeSwitch[Suluco]]]:LAST[Parallax_StockScatterTextures]:NEEDS[Parallax_StockScatterTextures]
{
    @Body:HAS[#name[Suluco]]
    {
        @name = Kerbin
    }
}

// Fixup terrain
@ParallaxTerrain:HAS[@KcalbelohSystemSettings:HAS[#HomeSwitch[Suluco]]]:LAST[Parallax_StockTerrainTextures]:NEEDS[Parallax_StockTerrainTextures]
{
    @Body:HAS[#name[Suluco]]
    {
        @name = Kerbin
    }
}

//
//  Mehtna
//

// Fixup terrain, PQSMods, biomes
@Kopernicus:HAS[@KcalbelohSystemSettings:HAS[#HomeSwitch[Mehtna]]]:LAST[Parallax_StockTerrainTextures]:NEEDS[Parallax_StockTerrainTextures]
{
	@Body[Kerbin]
	{
		// Set biome map to Mehtna's and copy the biomes across
		@Properties
		{
			%biomeMap = #$../../Body[Mehtna]/Properties/biomeMap$
			!Biomes{}
			#../../Body[Mehtna]/Properties/Biomes{}
		}

		%PQS
		{
			%Mods
			{
				!Parallax,*{}
				Parallax
				{
					subdivisionLevel = 7
					subdivisionRadius = 650
					order = 999999
				}
			}
		}
	}
}

// Fixup scatters
@ParallaxScatters:HAS[@KcalbelohSystemSettings:HAS[#HomeSwitch[Mehtna]]]:LAST[Parallax_StockScatterTextures]:NEEDS[Parallax_StockScatterTextures]
{
    @Body:HAS[#name[Mehtna]]
    {
        @name = Kerbin
    }
}

// Fixup terrain
@ParallaxTerrain:HAS[@KcalbelohSystemSettings:HAS[#HomeSwitch[Mehtna]]]:LAST[Parallax_StockTerrainTextures]:NEEDS[Parallax_StockTerrainTextures]
{
    @Body:HAS[#name[Mehtna]]
    {
        @name = Kerbin
    }
}

//
//  Eviscerate Kerbin - Move everything to Nibrek
//

@ParallaxTerrain:HAS[@KcalbelohSystemSettings:HAS[#HomeSwitchEnabled[?rue]]]:LAST[KcalbelohSystem]:NEEDS[Parallax_StockTerrainTextures]
{
	@Body:HAS[#name[Kerbin]]
	{
		@name = Nibrek
	}
}

@ParallaxScatters:HAS[@KcalbelohSystemSettings:HAS[#HomeSwitchEnabled[?rue]]]:LAST[KcalbelohSystem]:NEEDS[Parallax_StockScatterTextures]
{
	@Body:HAS[#name[Kerbin]]
	{
		@name = Nibrek
	}
}


@Kopernicus:HAS[@KcalbelohSystemSettings:HAS[#HomeSwitchEnabled[?rue]]]:LAST[Parallax_StockScatterTextures]:NEEDS[Parallax_StockScatterTextures]
{
	@Body[Nibrek]
	{
		%Properties
		{
			%biomeMap = Parallax_StockTextures/_Scatters/Textures/Kerbin/PluginData/biomeMap.dds
			!Biomes{}
			Biomes
			{
				Biome
				{
					name = Water // The name of this biome.
					displayName = Water // The displayed name of the biome. Can be a localization tag.
					value = 0 // A value that gets multiplied with every amount of science that is returned in the biome.
					color = 0.215686277,0.384313732,0.670588255,1 // The color of the biome on the biome map.
				}
				Biome
				{
					name = Grasslands // The name of this biome.
					displayName = Grasslands // The displayed name of the biome. Can be a localization tag.
					value = 0 // A value that gets multiplied with every amount of science that is returned in the biome.
					color = 0.513725519,0.737254918,0.180392161,1 // The color of the biome on the biome map.
				}
				Biome
				{
					name = Highlands // The name of this biome.
					displayName = Highlands // The displayed name of the biome. Can be a localization tag.
					value = 0 // A value that gets multiplied with every amount of science that is returned in the biome.
					color = 0.36470589,0.521568656,0.164705887,1 // The color of the biome on the biome map.
				}
				Biome
				{
					name = Shores // The name of this biome.
					displayName = Shores // The displayed name of the biome. Can be a localization tag.
					value = 0 // A value that gets multiplied with every amount of science that is returned in the biome.
					color = 0.980392158,0.949019611,0.717647076,1 // The color of the biome on the biome map.
				}
				Biome
				{
					name = Mountains // The name of this biome.
					displayName = Mountains // The displayed name of the biome. Can be a localization tag.
					value = 0 // A value that gets multiplied with every amount of science that is returned in the biome.
					color = 0.654901981,0.654901981,0.654901981,1 // The color of the biome on the biome map.
				}
				Biome
				{
					name = Deserts // The name of this biome.
					displayName = Deserts // The displayed name of the biome. Can be a localization tag.
					value = 0 // A value that gets multiplied with every amount of science that is returned in the biome.
					color = 0.917647064,0.749019623,0.435294122,1 // The color of the biome on the biome map.
				}
				Biome
				{
					name = Badlands // The name of this biome.
					displayName = Badlands // The displayed name of the biome. Can be a localization tag.
					value = 0 // A value that gets multiplied with every amount of science that is returned in the biome.
					color = 0.592156887,0.309803933,0.137254909,1 // The color of the biome on the biome map.
				}
				Biome
				{
					name = Tundra // The name of this biome.
					displayName = Tundra // The displayed name of the biome. Can be a localization tag.
					value = 0 // A value that gets multiplied with every amount of science that is returned in the biome.
					color = 0.78039217,0.56078434,0.874509811,1 // The color of the biome on the biome map.
				}
				Biome
				{
					name = Ice Caps // The name of this biome.
					displayName = Ice Caps // The displayed name of the biome. Can be a localization tag.
					value = 0 // A value that gets multiplied with every amount of science that is returned in the biome.
					color = 1,1,1,1 // The color of the biome on the biome map.
				}
				Biome
				{
					name = Northern Ice Shelf // The name of this biome.
					displayName = Northern Ice Shelf // The displayed name of the biome. Can be a localization tag.
					value = 0 // A value that gets multiplied with every amount of science that is returned in the biome.
					color = 0.894117653,0.992156863,1,1 // The color of the biome on the biome map.
				}
				Biome
				{
					name = Southern Ice Shelf // The name of this biome.
					displayName = Southern Ice Shelf // The displayed name of the biome. Can be a localization tag.
					value = 0 // A value that gets multiplied with every amount of science that is returned in the biome.
					color = 0.847058833,0.847058833,0.847058833,1 // The color of the biome on the biome map.
				}

				//CUSTOM BIOMES

				Biome	//Ice bergs spawn here
				{
					name = The Cold Ocean
					displayName = The Cold Ocean
					value = 1
					color = #254C4F
				}
				Biome	//Ice bergs can spawn in cold shores biomes, as they extend off the land like shores
				{
					name = Cold Shores
					displayName = Cold Shores
					value = 1
					color = #33204C
				}
			}
		}
		%PQS
		{
			%Mods
			{
				!Parallax,*{}
				Parallax
				{
					subdivisionLevel = 7
					subdivisionRadius = 700
					order = 999999
				}
			}
		}
	}
}